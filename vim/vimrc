set nocompatible              " be iMproved, required
filetype off                  " required
filetype plugin indent on     " required

" Copied settings from Korp =)
set nobackup
set hidden
set noswapfile
set wildignore=*.pyc
set foldmethod=indent
set foldnestmax=2
set foldlevel=99

set tabstop=4 expandtab shiftwidth=4 softtabstop=4 autoindent smartindent

autocmd FileType python setlocal tabstop=4 expandtab shiftwidth=4 softtabstop=4 autoindent smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with omnifunc=pythoncomplete#Complete
autocmd FileType php setlocal tabstop=4 expandtab shiftwidth=4 softtabstop=4 autoindent smartindent omnifunc=phpomplete#Complete
autocmd FileType sh setlocal tabstop=4 expandtab shiftwidth=4 softtabstop=4 autoindent smartindent omnifunc=phpomplete#Complete
autocmd FileType cucumber setlocal tabstop=4 expandtab shiftwidth=4 softtabstop=4
autocmd BufRead *.py inoremap # X<c-h>#
"autocmd BufRead,BufNewFile *pl,*.py setlocal filetype=python
"autocmd BufNewFile,BufReadPost,FilterReadPost,FileReadPost,Syntax * SpaceHi
"autocmd FileType help NoSpaceHi
"autocmd BufRead,BufNewFile *php,*.module,*.test setlocal filetype=php

set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·


" Status line stuff
set laststatus=2  " Always display the status line
set noshowmode    " Insert is shown by lightline
set ruler         " show the cursor position all the time
set number

" Make it obvious where 80 characters is
"set textwidth=80
"set colorcolumn=+1

" Color scheme

syntax on
set t_Co=256
color xoria256
"color base16-default-dark
highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE

" It's hard to release shift...

cnoreabbrev W w
cnoreabbrev Wq wq
cnoreabbrev WQ wq
cnoreabbrev Cq wq
cnoreabbrev CQ wq

" Python syntax

let python_highlight_all = 1



" Lightline

let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'subseparator': { 'left': '|', 'right': '|' }
      \ }

function! LightLineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightLineFilename()
  let fname = expand('%')
  return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let branch = fugitive#head()
      return branch !=# '' ? mark.branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

let g:ctrlp_prompt_mappings = {
  \ 'PrtSelectMove("j")':   ['<c-k>', '<down>'],
  \ 'PrtSelectMove("k")':   ['<c-i>', '<up>'],
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

"let g:tagbar_status_func = 'TagbarStatusFunc'
"
"function! TagbarStatusFunc(current, sort, fname, ...) abort
"    let g:lightline.fname = a:fname
"  return lightline#statusline(0)
"endfunction

"augroup AutoSyntastic
"  autocmd!
"  autocmd BufWritePost *.c,*.cpp call s:syntastic()
"augroup END
"function! s:syntastic()
"  SyntasticCheck
"  call lightline#update()
"endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

""" CtrlP settings from Korp

let g:ctrlp_max_height = 71
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_lazy_update = 10
let g:ctrlp_custom_ignore = 'dist\|venv\|.venv\|__pycache__\|node_modules'

""" CTAGS

let mapleader = ','

nnoremap <leader>j :call JumpToTag(0)<CR>

function! JumpToTag(preview)
    let ic = &ic
    set noic
    if a:preview
        let jump_command = 'ptjump ' . expand('<cword>')
    else
        let jump_command = 'tjump ' . expand('<cword>')
    endif
    try
        if &filetype == 'behave'
            execute 'BehaveJump'
        else
            execute jump_command
        endif
    catch /tag not found/
        try
            let first_exception = v:exception
            execute jump_command . '.py'
        catch /tag not found/
            echohl WarningMsg
            echom first_exception
            echohl None
        endtry
    finally
        let &ic = ic
    endtry
endfunction


" Let us wrap around line endings
set whichwrap+=<,>,h,l,[,]

""" Personal key bindings

" WASD style movement
nnoremap i <Up>
nnoremap k <Down>
nnoremap j <Left>
nnoremap l <Right>

vnoremap i <Up>
vnoremap k <Down>
vnoremap j <Left>
vnoremap l <Right>

noremap h i
noremap H I

" Ctrl-modifier
nnoremap <C-i> 5<Up>
nnoremap <C-k> 5<Down>
nnoremap <C-j> <S-Left>
nnoremap <C-l> <S-Right>

vnoremap <C-i> 5<Up>
vnoremap <C-k> 5<Down>
vnoremap <C-j> <S-Left>
vnoremap <C-l> <S-Right>

inoremap <C-j> <Left>
inoremap <C-l> <Right>

" Shift-modifier
nnoremap <S-i> :GitGutterEnable<CR>:GitGutterPrevHunk<CR>
nnoremap <S-k> :GitGutterEnable<CR>:GitGutterNextHunk<CR>
vnoremap <S-i> {<Down>
vnoremap <S-k> }<Up>

nnoremap <S-l> $
nnoremap <S-j> ^
vnoremap <S-l> $
vnoremap <S-j> ^

" Window navigation
noremap <C-w>i <C-w>k
noremap <C-w><C-i> <C-w>k
noremap <C-w>j <C-w>h
noremap <C-w><C-j> <C-w>h
noremap <C-w>k <C-w>j
noremap <C-w><C-k> <C-w>j
noremap <C-w><C-l> <C-w>l

" Delete without yanking
noremap <leader>d "_d

" Replace selected text without yanking it
vnoremap <leader>p "_dP

" CtrlP extras
noremap <C-b> :CtrlPBuffer<CR>
noremap <C-o> :CtrlPBuffer<CR>
noremap <C-r> :CtrlPBufTag<CR>

" Search
noremap <C-f> /
nnoremap <leader>f :xa<cr>

" Redo on same key
noremap <C-u> <C-r>

" Ctrl-C ftw
nnoremap <silent> <C-c> <Esc>:noh<CR>
inoremap <silent> <C-c> <Esc>
vnoremap <silent> <C-c> <Esc>

" Colon is hard
noremap <CR> :

" Comment block
vnoremap # <Home><C-v>I#<Esc>

" Goto the next occurence of a just deleted text 
noremap <silent> - :exe '/' . @-<CR>n

" Repeat last change and go to next occurence
noremap _ .n

" Mode shortcuts
"nmap \l :setlocal number!<CR>
"nmap \o :set paste!<CR>

" Search for current selection
vnoremap // y/<C-R>"<CR>

" Disable X11 communication
set clipboard=autoselect,exclude:.*

" Backspace everything
set backspace=indent,eol,start

" Highlight search
set hlsearch

" Keep 3 lines below and above the cursor
set scrolloff=10

" Set wildmode
set wildmode=longest,list,full

" MultiCursors

let g:multi_cursor_quit_key            = '<C-c>'

" GitGutter

let g:gitgutter_map_keys = 0
